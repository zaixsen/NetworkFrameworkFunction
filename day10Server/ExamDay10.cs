// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: examDay10.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ExamDay10 {

  #region Messages
  public sealed class PlayerData : pb::IMessage {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Posx" field.</summary>
    public const int PosxFieldNumber = 2;
    private float posx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Posx {
      get { return posx_; }
      set {
        posx_ = value;
      }
    }

    /// <summary>Field number for the "Posz" field.</summary>
    public const int PoszFieldNumber = 3;
    private float posz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Posz {
      get { return posz_; }
      set {
        posz_ = value;
      }
    }

    /// <summary>Field number for the "RotY" field.</summary>
    public const int RotYFieldNumber = 4;
    private float rotY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotY {
      get { return rotY_; }
      set {
        rotY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Posx != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Posx);
      }
      if (Posz != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Posz);
      }
      if (RotY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RotY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Posx != 0F) {
        size += 1 + 4;
      }
      if (Posz != 0F) {
        size += 1 + 4;
      }
      if (RotY != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 21: {
            Posx = input.ReadFloat();
            break;
          }
          case 29: {
            Posz = input.ReadFloat();
            break;
          }
          case 37: {
            RotY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class OnlinePlayer : pb::IMessage {
    private static readonly pb::MessageParser<OnlinePlayer> _parser = new pb::MessageParser<OnlinePlayer>(() => new OnlinePlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnlinePlayer> Parser { get { return _parser; } }

    /// <summary>Field number for the "AllOnlinePlayer" field.</summary>
    public const int AllOnlinePlayerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ExamDay10.PlayerData> _repeated_allOnlinePlayer_codec
        = pb::FieldCodec.ForMessage(10, global::ExamDay10.PlayerData.Parser);
    private readonly pbc::RepeatedField<global::ExamDay10.PlayerData> allOnlinePlayer_ = new pbc::RepeatedField<global::ExamDay10.PlayerData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExamDay10.PlayerData> AllOnlinePlayer {
      get { return allOnlinePlayer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allOnlinePlayer_.WriteTo(output, _repeated_allOnlinePlayer_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allOnlinePlayer_.CalculateSize(_repeated_allOnlinePlayer_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allOnlinePlayer_.AddEntriesFrom(input, _repeated_allOnlinePlayer_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class AllRoomData : pb::IMessage {
    private static readonly pb::MessageParser<AllRoomData> _parser = new pb::MessageParser<AllRoomData>(() => new AllRoomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllRoomData> Parser { get { return _parser; } }

    /// <summary>Field number for the "AllRoom" field.</summary>
    public const int AllRoomFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ExamDay10.RoomData> _repeated_allRoom_codec
        = pb::FieldCodec.ForMessage(10, global::ExamDay10.RoomData.Parser);
    private readonly pbc::RepeatedField<global::ExamDay10.RoomData> allRoom_ = new pbc::RepeatedField<global::ExamDay10.RoomData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExamDay10.RoomData> AllRoom {
      get { return allRoom_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allRoom_.WriteTo(output, _repeated_allRoom_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allRoom_.CalculateSize(_repeated_allRoom_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allRoom_.AddEntriesFrom(input, _repeated_allRoom_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoomData : pb::IMessage {
    private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "RoomName" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxPerson" field.</summary>
    public const int MaxPersonFieldNumber = 3;
    private int maxPerson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPerson {
      get { return maxPerson_; }
      set {
        maxPerson_ = value;
      }
    }

    /// <summary>Field number for the "RoomPlayer" field.</summary>
    public const int RoomPlayerFieldNumber = 4;
    private static readonly pb::FieldCodec<global::ExamDay10.PlayerData> _repeated_roomPlayer_codec
        = pb::FieldCodec.ForMessage(34, global::ExamDay10.PlayerData.Parser);
    private readonly pbc::RepeatedField<global::ExamDay10.PlayerData> roomPlayer_ = new pbc::RepeatedField<global::ExamDay10.PlayerData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExamDay10.PlayerData> RoomPlayer {
      get { return roomPlayer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (MaxPerson != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxPerson);
      }
      roomPlayer_.WriteTo(output, _repeated_roomPlayer_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (MaxPerson != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPerson);
      }
      size += roomPlayer_.CalculateSize(_repeated_roomPlayer_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 24: {
            MaxPerson = input.ReadInt32();
            break;
          }
          case 34: {
            roomPlayer_.AddEntriesFrom(input, _repeated_roomPlayer_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
